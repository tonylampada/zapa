"""Initial schema

Revision ID: 1207b06d8194
Revises:
Create Date: 2025-05-25 22:39:58.027914

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "1207b06d8194"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("phone_number", sa.String(length=20), nullable=False),
        sa.Column("display_name", sa.String(length=255), nullable=True),
        sa.Column("first_seen", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_active", sa.DateTime(timezone=True), nullable=True),
        sa.Column("preferences", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    op.create_index(op.f("ix_user_phone_number"), "user", ["phone_number"], unique=True)
    op.create_table(
        "auth_code",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=6), nullable=False),
        sa.Column("used", sa.Boolean(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_auth_code_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_auth_code")),
    )
    op.create_index(op.f("ix_auth_code_code"), "auth_code", ["code"], unique=False)
    op.create_index(
        op.f("ix_auth_code_expires_at"), "auth_code", ["expires_at"], unique=False
    )
    op.create_index(
        op.f("ix_auth_code_user_id"), "auth_code", ["user_id"], unique=False
    )
    op.create_table(
        "llm_config",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "provider",
            sa.Enum("OPENAI", "ANTHROPIC", "GOOGLE", name="llmprovider"),
            nullable=False,
        ),
        sa.Column("api_key_encrypted", sa.String(length=500), nullable=False),
        sa.Column("model_settings", sa.JSON(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_llm_config_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_llm_config")),
    )
    op.create_index(
        op.f("ix_llm_config_user_id"), "llm_config", ["user_id"], unique=False
    )
    op.create_table(
        "session",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "session_type", sa.Enum("MAIN", "USER", name="sessiontype"), nullable=False
        ),
        sa.Column(
            "status",
            sa.Enum(
                "QR_PENDING", "CONNECTED", "DISCONNECTED", "ERROR", name="sessionstatus"
            ),
            nullable=False,
        ),
        sa.Column("connected_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("disconnected_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("session_metadata", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_session_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_session")),
    )
    op.create_index(op.f("ix_session_user_id"), "session", ["user_id"], unique=False)
    op.create_table(
        "message",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("sender_jid", sa.String(length=50), nullable=False),
        sa.Column("recipient_jid", sa.String(length=50), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "message_type",
            sa.Enum("TEXT", "IMAGE", "AUDIO", "VIDEO", "DOCUMENT", name="messagetype"),
            nullable=False,
        ),
        sa.Column("content", sa.Text(), nullable=True),
        sa.Column("caption", sa.Text(), nullable=True),
        sa.Column("reply_to_id", sa.Integer(), nullable=True),
        sa.Column("media_metadata", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["reply_to_id"], ["message.id"], name=op.f("fk_message_reply_to_id_message")
        ),
        sa.ForeignKeyConstraint(
            ["session_id"], ["session.id"], name=op.f("fk_message_session_id_session")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_message_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_message")),
    )
    op.create_index(
        op.f("ix_message_reply_to_id"), "message", ["reply_to_id"], unique=False
    )
    op.create_index(
        op.f("ix_message_sender_jid"), "message", ["sender_jid"], unique=False
    )
    op.create_index(
        op.f("ix_message_session_id"), "message", ["session_id"], unique=False
    )
    op.create_index(
        op.f("ix_message_timestamp"), "message", ["timestamp"], unique=False
    )
    op.create_index(op.f("ix_message_user_id"), "message", ["user_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_message_user_id"), table_name="message")
    op.drop_index(op.f("ix_message_timestamp"), table_name="message")
    op.drop_index(op.f("ix_message_session_id"), table_name="message")
    op.drop_index(op.f("ix_message_sender_jid"), table_name="message")
    op.drop_index(op.f("ix_message_reply_to_id"), table_name="message")
    op.drop_table("message")
    op.drop_index(op.f("ix_session_user_id"), table_name="session")
    op.drop_table("session")
    op.drop_index(op.f("ix_llm_config_user_id"), table_name="llm_config")
    op.drop_table("llm_config")
    op.drop_index(op.f("ix_auth_code_user_id"), table_name="auth_code")
    op.drop_index(op.f("ix_auth_code_expires_at"), table_name="auth_code")
    op.drop_index(op.f("ix_auth_code_code"), table_name="auth_code")
    op.drop_table("auth_code")
    op.drop_index(op.f("ix_user_phone_number"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
